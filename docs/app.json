[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nimport pandas as pd\nimport seaborn as sns\nfrom shiny import render, reactive\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Penguin Data\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\n# Use the ui.sidebar() function to create a sidebar\n# Set the open parameter to \"open\" to make the sidebar open by default\n# Use a with block to add content to the sidebar\nwith ui.sidebar(open=\"open\"):\n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    # pass in a string argument (in quotes) to set the header text to \"Sidebar\" \n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    # pass in three arguments:\n    #   the name of the input (in quotes), e.g., \"selected_attribute\"\n    #   the label for the input (in quotes)\n    #   a list of options for the input (in square brackets) \n    #   e.g. [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Plotly Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n    )\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    #   pass in two arguments:\n    #   the name of the input (in quotes), e.g. \"plotly_bin_count\"\n    #   the label for the input (in quotes)\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 30)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    #   pass in four arguments:\n    #   the name of the input (in quotes), e.g. \"seaborn_bin_count\"\n    #   the label for the input (in quotes)\n    #   the minimum value for the input (as an integer)\n    #   the maximum value for the input (as an integer)\n    #   the default value for the input (as an integer)\n    ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn Bins\", 1, 50, 25)\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    #   pass in five arguments:\n    #   the name of the input (in quotes), e.g.  \"selected_species_list\"\n    #   the label for the input (in quotes)\n    #   a list of options for the input (in square brackets) as [\"Adelie\", \"Gentoo\", \"Chinstrap\"]\n    #   a keyword argument selected= a list of selected options for the input (in square brackets)\n    #   a keyword argument inline= a Boolean value (True or False) as you like\n    ui.input_checkbox_group(\n        \"selected_species_list\", \n        \"Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=\"Gentoo\",\n        inline=True\n    )\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    #   pass in two arguments:\n    #   the text for the hyperlink (in quotes), e.g. \"GitHub\"\n    #   a keyword argument href= the URL for the hyperlink (in quotes), e.g. your GitHub repo URL\n    #   a keyword argument target= \"_blank\" to open the link in a new tab\n    ui.a(\n        \"Github\",\n        href=\"https://github.com/matthewellishanson/cintel-02-data/blob/main/app.py\",\n        target=\"_blank\"\n    )\n\n# Create a DataTable\nwith ui.layout_columns():\n\n    with ui.card(full_screen=True):\n        ui.h2(\"Penguins DataTable\")\n\n        @render.data_frame\n        def render_penguins_table():\n            return render.DataTable(filtered_data())\n\n    # create a DataGrid\n    with ui.card(full_screen=True):\n        ui.h2(\"Penguins DataGrid\")\n\n        @render.data_frame\n        def penguins_datagrid():\n            return render.DataGrid(filtered_data())\n\nui.hr()\n\n# Create a new set of columns for charts\nwith ui.layout_columns():\n\n    # Create a Plotly Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\")\n    \n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(), x=input.selected_attribute(), nbins=input.plotly_bin_count(), color=\"species\"\n        )\n\n    # Creates a Seaborn Histogram showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\")\n    \n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_histogram():\n            histplot = sns.histplot(data=filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count(), multiple=\"dodge\", hue=\"species\")\n            histplot.set_title(\"Palmer Penguins\")\n            histplot.set_xlabel(\"Mass\")\n            histplot.set_ylabel(\"Count\")\n            return histplot\n    \n    # Creates a Plotly Scatterplot showing all species\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Species Scatterplot\")\n    \n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(filtered_data(),\n                x=\"bill_length_mm\",\n                y=\"body_mass_g\",\n                color=\"species\",\n                title=\"Penguins Plot\",\n                labels={\n                    \"bill_length_mm\": \"Bill Length (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\",\n                }, \n            )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n", "type": "text"}]